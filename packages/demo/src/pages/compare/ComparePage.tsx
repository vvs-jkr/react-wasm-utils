import React, { useState } from 'react'
import { useWasmWorker } from '../../shared/api'
import { Button } from '../../shared/ui'

// –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const SAMPLE_OBJECTS = {
  simple: {
    obj1: JSON.stringify({ name: '–ò–≤–∞–Ω', age: 25, city: '–ú–æ—Å–∫–≤–∞' }, null, 2),
    obj2: JSON.stringify({ name: '–ò–≤–∞–Ω', age: 25, city: '–ú–æ—Å–∫–≤–∞' }, null, 2),
  },
  different: {
    obj1: JSON.stringify({ name: '–ò–≤–∞–Ω', age: 25, city: '–ú–æ—Å–∫–≤–∞' }, null, 2),
    obj2: JSON.stringify({ name: '–ü—ë—Ç—Ä', age: 30, city: '–°–ü–±' }, null, 2),
  },
  complex: {
    obj1: JSON.stringify(
      {
        user: {
          profile: { name: '–ê–Ω–Ω–∞', settings: { theme: 'dark', lang: 'ru' } },
          data: [1, 2, { nested: true }],
        },
        timestamp: '2024-01-01',
      },
      null,
      2
    ),
    obj2: JSON.stringify(
      {
        user: {
          profile: { name: '–ê–Ω–Ω–∞', settings: { theme: 'light', lang: 'ru' } },
          data: [1, 2, { nested: true }],
        },
        timestamp: '2024-01-01',
      },
      null,
      2
    ),
  },
}

export function ComparePage() {
  const [object1, setObject1] = useState(SAMPLE_OBJECTS.simple.obj1)
  const [object2, setObject2] = useState(SAMPLE_OBJECTS.simple.obj2)
  const [comparisonResult, setComparisonResult] = useState<boolean | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [compareTime, setCompareTime] = useState<number | null>(null)
  const [error, setError] = useState<string | null>(null)
  const { execute, hasWorker } = useWasmWorker()

  const loadSample = (sampleKey: keyof typeof SAMPLE_OBJECTS) => {
    const sample = SAMPLE_OBJECTS[sampleKey]
    setObject1(sample.obj1)
    setObject2(sample.obj2)
    setComparisonResult(null)
    setError(null)
    setCompareTime(null)
  }

  const compareObjects = async () => {
    if (!hasWorker) return

    setIsLoading(true)
    setComparisonResult(null)
    setError(null)

    try {
      // –ü–∞—Ä—Å–∏–º JSON –æ–±—ä–µ–∫—Ç—ã
      const obj1 = JSON.parse(object1)
      const obj2 = JSON.parse(object2)

      const startTime = performance.now()
      const result = await execute('deepEqual', { a: obj1, b: obj2 })
      const compareTime = performance.now() - startTime

      setComparisonResult(result as boolean)
      setCompareTime(compareTime)
    } catch (parseError) {
      if (parseError instanceof SyntaxError) {
        setError('‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.')
      } else {
        setError(`‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${parseError}`)
      }
    } finally {
      setIsLoading(false)
    }
  }

  const clearInputs = () => {
    setObject1('')
    setObject2('')
    setComparisonResult(null)
    setError(null)
    setCompareTime(null)
  }

  const formatJson = (input: string, setter: (value: string) => void) => {
    try {
      const parsed = JSON.parse(input)
      const formatted = JSON.stringify(parsed, null, 2)
      setter(formatted)
      setError(null)
    } catch (e) {
      setError('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç')
    }
  }

  return (
    <div className="demo-container">
      <div className="demo-content demo-content--compare">
        {!hasWorker && <div className="status-warning">‚ö†Ô∏è WASM –≤–æ—Ä–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...</div>}

        {/* –ü—Ä–∏–º–µ—Ä—ã */}
        <div className="input-group">
          <label>–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä:</label>
          <div className="button-group">
            <Button size="sm" variant="secondary" onClick={() => loadSample('simple')}>
              üü¢ –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            </Button>
            <Button size="sm" variant="secondary" onClick={() => loadSample('different')}>
              üî¥ –†–∞–∑–Ω—ã–µ
            </Button>
            <Button size="sm" variant="secondary" onClick={() => loadSample('complex')}>
              üîÑ –°–ª–æ–∂–Ω—ã–µ
            </Button>
          </div>
        </div>

        {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ */}
        <div className="compare-inputs">
          <div className="input-section">
            <label>–û–±—ä–µ–∫—Ç 1 (JSON):</label>
            <textarea
              value={object1}
              onChange={e => setObject1(e.target.value)}
              className="input-field"
              placeholder='{ "name": "–ü—Ä–∏–º–µ—Ä", "value": 123 }'
              rows={12}
            />
            <Button size="sm" variant="secondary" onClick={() => formatJson(object1, setObject1)}>
              üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
            </Button>
          </div>

          <div className="input-section">
            <label>–û–±—ä–µ–∫—Ç 2 (JSON):</label>
            <textarea
              value={object2}
              onChange={e => setObject2(e.target.value)}
              className="input-field"
              placeholder='{ "name": "–ü—Ä–∏–º–µ—Ä", "value": 123 }'
              rows={12}
            />
            <Button size="sm" variant="secondary" onClick={() => formatJson(object2, setObject2)}>
              üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
            </Button>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="button-group">
          <Button
            onClick={compareObjects}
            loading={isLoading}
            disabled={!hasWorker || !object1.trim() || !object2.trim()}
          >
            üîç –°—Ä–∞–≤–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã
          </Button>
          <Button variant="secondary" onClick={clearInputs}>
            üßπ –û—á–∏—Å—Ç–∏—Ç—å
          </Button>
        </div>

        {/* –û—à–∏–±–∫–∏ */}
        {error && (
          <div className="result error">
            <h4>–û—à–∏–±–∫–∞</h4>
            <p>{error}</p>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */}
        {comparisonResult !== null && !error && (
          <div className="results-section">
            <div className="comparison-result">
              {comparisonResult ? (
                <span style={{ color: '#4caf50' }}>‚úÖ –û–±—ä–µ–∫—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã</span>
              ) : (
                <span style={{ color: '#f44336' }}>‚ùå –û–±—ä–µ–∫—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è</span>
              )}
              {compareTime && (
                <div style={{ fontSize: '0.9rem', color: '#999', marginTop: '0.5rem' }}>
                  –í—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: <strong>{compareTime.toFixed(2)} –º—Å</strong>
                </div>
              )}
            </div>

            <div className="info">
              üí° <strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
              —Å–æ—Å—Ç–æ—è–Ω–∏–π
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
