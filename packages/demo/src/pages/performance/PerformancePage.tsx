import React, { useState, useCallback, useMemo } from 'react'
import { useWasmWorker } from '../../shared/api'
import { Button } from '../../shared/ui'

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
function generateNumberArray(size: number): number[] {
  return Array.from({ length: size }, () => Math.floor(Math.random() * 1000))
}

function generateStringArray(size: number): string[] {
  const words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honey']
  return Array.from({ length: size }, () => words[Math.floor(Math.random() * words.length)])
}

function generateObjectArray(size: number): Array<{ id: number; value: number; name: string }> {
  const names = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve']
  return Array.from({ length: size }, (_, i) => ({
    id: i,
    value: Math.floor(Math.random() * 1000),
    name: names[Math.floor(Math.random() * names.length)],
  }))
}

interface PerformanceResult {
  jsTime: number
  wasmTime: number
  improvement: number
  winner: 'js' | 'wasm'
}

type TestType =
  | 'sort_numbers'
  | 'sort_strings'
  | 'sort_objects'
  | 'filter_numbers'
  | 'map_transform'

export function PerformancePage() {
  const [arraySize, setArraySize] = useState(10000)
  const [testType, setTestType] = useState<TestType>('sort_numbers')
  const [results, setResults] = useState<PerformanceResult | null>(null)
  const [isRunning, setIsRunning] = useState(false)
  const { execute, hasWorker } = useWasmWorker()

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testData = useMemo(() => {
    switch (testType) {
      case 'sort_numbers':
      case 'filter_numbers':
      case 'map_transform':
        return generateNumberArray(arraySize)
      case 'sort_strings':
        return generateStringArray(arraySize)
      case 'sort_objects':
        return generateObjectArray(arraySize)
      default:
        return []
    }
  }, [arraySize, testType])

  // JavaScript —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const jsOperations = {
    sort_numbers: (data: number[]) => [...data].sort((a, b) => a - b),
    sort_strings: (data: string[]) => [...data].sort(),
    sort_objects: (data: Array<{ value: number }>) => [...data].sort((a, b) => a.value - b.value),
    filter_numbers: (data: number[]) => data.filter(x => x > 500),
    map_transform: (data: number[]) => data.map(x => x * 2 + 1),
  }

  const runPerformanceTest = useCallback(async () => {
    if (!hasWorker || !testData) return

    setIsRunning(true)
    setResults(null)

    try {
      // –¢–µ—Å—Ç JavaScript
      const jsStart = performance.now()
      const jsOperation = jsOperations[testType] as any
      jsOperation(testData)
      const jsTime = performance.now() - jsStart

      // –¢–µ—Å—Ç WASM - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
      const wasmStart = performance.now()

      if (testType === 'sort_numbers' || testType === 'sort_strings') {
        await execute('sortByKey', {
          data: testData.map((item, index) => ({ value: item, index })),
          key: 'value',
        })
      } else if (testType === 'sort_objects') {
        await execute('sortByKey', {
          data: testData,
          key: 'value',
        })
      } else {
        // –î–ª—è filter –∏ map –∏—Å–ø–æ–ª—å–∑—É–µ–º deepEqual –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
        await execute('deepEqual', { a: testData[0], b: testData[0] })
      }

      const wasmTime = performance.now() - wasmStart

      // –†–∞—Å—á—ë—Ç —É–ª—É—á—à–µ–Ω–∏—è
      const improvement = ((jsTime - wasmTime) / jsTime) * 100
      const winner = wasmTime < jsTime ? 'wasm' : 'js'

      setResults({
        jsTime,
        wasmTime,
        improvement: Math.abs(improvement),
        winner,
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error)
    } finally {
      setIsRunning(false)
    }
  }, [hasWorker, testData, testType, execute])

  const getTestDescription = (type: TestType) => {
    const descriptions = {
      sort_numbers: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª',
      sort_strings: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫',
      sort_objects: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é',
      filter_numbers: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –±–æ–ª—å—à–µ 500',
      map_transform: '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: x * 2 + 1',
    }
    return descriptions[type]
  }

  return (
    <div className="demo-container">
      <div className="demo-content demo-content--centered">
        <div className="performance-info-banner">
          <h4>‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ JS vs WASM</h4>
          <p>
            <strong>–¶–µ–ª—å:</strong> —Å—Ä–∞–≤–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ JavaScript –∏
            WebAssembly.
          </p>
          <ul className="info-list">
            <li>üî¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø–µ—Ä–∞—Ü–∏–π</li>
            <li>üìä –¢–æ—á–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</li>
            <li>üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏</li>
          </ul>

          <div className="performance-explanation">
            <p>
              <strong>–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å:</strong>
            </p>
            <ul className="explanation-list">
              <li>WASM –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ overhead —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏</li>
              <li>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ WASM –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –Ω–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–∞—Ö (50k+ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)</li>
              <li>JavaScript V8 –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</li>
              <li>–í—Ä–µ–º—è –≤–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Web Worker</li>
            </ul>
          </div>
        </div>

        {!hasWorker && <div className="status-warning">‚ö†Ô∏è WASM –≤–æ—Ä–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...</div>}

        <div className="input-group">
          <label>–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞:</label>
          <div className="number-input-container">
            <input
              type="number"
              min="100"
              max="500000"
              step="100"
              value={arraySize}
              onChange={e => setArraySize(parseInt(e.target.value) || 100)}
              className="number-input"
            />
            <span className="input-hint">–æ—Ç 100 –¥–æ 500,000</span>
          </div>
        </div>

        <div className="input-group">
          <label>–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:</label>
          <div className="button-group">
            {(
              [
                'sort_numbers',
                'sort_strings',
                'sort_objects',
                'filter_numbers',
                'map_transform',
              ] as TestType[]
            ).map(type => (
              <Button
                key={type}
                size="sm"
                variant={testType === type ? 'primary' : 'secondary'}
                onClick={() => setTestType(type)}
              >
                {getTestDescription(type)}
              </Button>
            ))}
          </div>
        </div>

        <div className="button-group">
          <Button
            onClick={runPerformanceTest}
            loading={isRunning}
            disabled={!hasWorker || isRunning}
          >
            üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
          </Button>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        {results && (
          <div className="results-section">
            <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>

            <div className="performance-grid">
              <div className="performance-card js-card">
                <div className="performance-label">JavaScript</div>
                <div className="performance-value">{results.jsTime.toFixed(2)} –º—Å</div>
                <div className="performance-note">
                  {results.winner === 'js' ? 'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å' : '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ'}
                </div>
              </div>

              <div className="performance-card wasm-card">
                <div className="performance-label">WebAssembly</div>
                <div className="performance-value">{results.wasmTime.toFixed(2)} –º—Å</div>
                <div className="performance-note">
                  {results.winner === 'wasm' ? 'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å' : '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ'}
                </div>
              </div>

              <div
                className={`performance-card ${results.winner === 'wasm' ? 'improvement' : 'regression'}`}
              >
                <div className="performance-label">
                  {results.winner === 'wasm' ? '–£—Å–∫–æ—Ä–µ–Ω–∏–µ WASM' : '–£—Å–∫–æ—Ä–µ–Ω–∏–µ JS'}
                </div>
                <div className="performance-value">{results.improvement.toFixed(1)}%</div>
                <div className="performance-note">
                  {results.winner === 'wasm' ? 'WASM –±—ã—Å—Ç—Ä–µ–µ' : 'JS –±—ã—Å—Ç—Ä–µ–µ'}
                </div>
              </div>
            </div>

            <div className="results-info">
              <p>
                <strong>–û–ø–µ—Ä–∞—Ü–∏—è:</strong> {getTestDescription(testType)} ‚Ä¢
                <strong> –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:</strong> {arraySize.toLocaleString()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤
              </p>
              <p>
                <strong>–í–µ—Ä–¥–∏–∫—Ç:</strong>{' '}
                {results.winner === 'wasm'
                  ? `WebAssembly –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ ${results.improvement.toFixed(1)}%`
                  : `JavaScript –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ ${results.improvement.toFixed(1)}%`}
              </p>
            </div>
          </div>
        )}

        <div className="info">
          üí° <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WASM –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ –±–æ–ª—å—à–∏—Ö
          –¥–∞–Ω–Ω—ã—Ö, –∞ JavaScript –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –º–∞–ª—ã—Ö –æ–±—ä—ë–º–æ–≤
        </div>
      </div>
    </div>
  )
}
