import React, { useState, useMemo } from 'react'
import { useWasmWorker } from '../../shared/api'
import { Button } from '../../shared/ui'
import { downloadData } from '../../shared/lib'

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateTestData(count: number) {
  const firstNames = [
    '–ê–Ω–Ω–∞',
    '–ò–≤–∞–Ω',
    '–ú–∞—Ä–∏—è',
    '–ü–µ—Ç—Ä',
    '–ï–ª–µ–Ω–∞',
    '–ê–ª–µ–∫—Å–µ–π',
    '–û–ª—å–≥–∞',
    '–î–º–∏—Ç—Ä–∏–π',
    '–°–≤–µ—Ç–ª–∞–Ω–∞',
    '–ù–∏–∫–æ–ª–∞–π',
  ]
  const lastNames = [
    '–ò–≤–∞–Ω–æ–≤',
    '–ü–µ—Ç—Ä–æ–≤',
    '–°–∏–¥–æ—Ä–æ–≤',
    '–ö–æ–∑–ª–æ–≤',
    '–ù–æ–≤–∏–∫–æ–≤',
    '–ú–æ—Ä–æ–∑–æ–≤',
    '–ü–µ—Ç—Ä–æ–≤',
    '–í–æ–ª–∫–æ–≤',
    '–°–æ–ª–æ–≤—å–µ–≤',
    '–í–∞—Å–∏–ª—å–µ–≤',
  ]

  return Array.from({ length: count }, (_, i) => ({
    id: i + 1,
    name: `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`,
    age: Math.floor(Math.random() * 50) + 18,
  }))
}

export function SortPage() {
  const [dataSize, setDataSize] = useState(10000)
  const [testData, setTestData] = useState<any[]>([])
  const [sortedData, setSortedData] = useState<any[]>([])
  const [sortField, setSortField] = useState<'name' | 'age'>('name')
  const [isLoading, setIsLoading] = useState(false)
  const [sortTime, setSortTime] = useState<number | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [rowsPerPage, setRowsPerPage] = useState(20)
  const [error, setError] = useState<string | null>(null)
  const [sortMethod, setSortMethod] = useState<'WASM' | 'JavaScript' | null>(null)
  const [generationProgress, setGenerationProgress] = useState<number | null>(null)
  const { execute, hasWorker } = useWasmWorker()

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const MAX_SAFE_SIZE = 500_000
  const EXTREME_SIZE_WARNING = 1_000_000
  const GENERATION_CHUNK_SIZE = 10_000

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const paginatedData = useMemo(() => {
    const startIndex = (currentPage - 1) * rowsPerPage
    const endIndex = startIndex + rowsPerPage
    return sortedData.slice(startIndex, endIndex)
  }, [sortedData, currentPage, rowsPerPage])

  const totalPages = useMemo(() => {
    return Math.ceil(sortedData.length / rowsPerPage)
  }, [sortedData.length, rowsPerPage])

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const generateData = async () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (dataSize > EXTREME_SIZE_WARNING) {
      const confirmed = window.confirm(
        `‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!\n\n–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å ${dataSize.toLocaleString()} –∑–∞–ø–∏—Å–µ–π.\n` +
          `–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫:\n` +
          `‚Ä¢ –ó–∞–≤–∏—Å–∞–Ω–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ 10+ —Å–µ–∫—É–Ω–¥\n` +
          `‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é >500MB –ø–∞–º—è—Ç–∏\n` +
          `‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ–º—É –∫—Ä–∞—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n` +
          `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ ${MAX_SAFE_SIZE.toLocaleString()} –∑–∞–ø–∏—Å–µ–π.\n\n` +
          `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ä–∏—Å–∫?`
      )
      if (!confirmed) return
    }

    setIsLoading(true)
    setSortedData([])
    setSortTime(null)
    setSortMethod(null)
    setCurrentPage(1)
    setError(null)
    setGenerationProgress(0)

    try {
      // –î–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º chunked generation
      if (dataSize > GENERATION_CHUNK_SIZE) {
        const data = await generateDataChunked(dataSize)
        setTestData(data)
        setSortedData(data)
      } else {
        // –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
        const data = generateTestData(dataSize)
        setTestData(data)
        setSortedData(data)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
      setError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${String(error)}`)
    } finally {
      setIsLoading(false)
      setGenerationProgress(null)
    }
  }

  // Chunked –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
  const generateDataChunked = async (count: number): Promise<any[]> => {
    const chunks = Math.ceil(count / GENERATION_CHUNK_SIZE)
    const result: any[] = []

    console.log(
      `üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count.toLocaleString()} –∑–∞–ø–∏—Å–µ–π –ø–æ ${GENERATION_CHUNK_SIZE.toLocaleString()} –∑–∞ —Ä–∞–∑...`
    )

    for (let chunkIndex = 0; chunkIndex < chunks; chunkIndex++) {
      const startIndex = chunkIndex * GENERATION_CHUNK_SIZE
      const endIndex = Math.min(startIndex + GENERATION_CHUNK_SIZE, count)
      const chunkSize = endIndex - startIndex

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º chunk
      const chunkData = generateTestData(chunkSize)

      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º ID –¥–ª—è continuity
      chunkData.forEach((item, index) => {
        item.id = startIndex + index + 1
      })

      result.push(...chunkData)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = Math.round(((chunkIndex + 1) / chunks) * 100)
      setGenerationProgress(progress)

      console.log(
        `üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${result.length.toLocaleString()}/${count.toLocaleString()} (${progress}%)`
      )

      // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å UI
      await new Promise(resolve => setTimeout(resolve, 10))
    }

    console.log(`‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.length.toLocaleString()} –∑–∞–ø–∏—Å–µ–π`)
    return result
  }

  const sortData = async () => {
    if (testData.length === 0) return

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    if (testData.length > EXTREME_SIZE_WARNING) {
      const confirmed = window.confirm(
        `‚ö†Ô∏è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê!\n\n` +
          `–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ${testData.length.toLocaleString()} –∑–∞–ø–∏—Å–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n` +
          `–ë—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –∑–∞–≤–∏—Å—à–∏–º.\n\n` +
          `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`
      )
      if (!confirmed) return
    }

    setIsLoading(true)
    setCurrentPage(1)
    setError(null)
    setSortMethod(null)
    const startTime = performance.now()

    try {
      let result: any[]

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º WASM –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ JavaScript fallback
      if (hasWorker) {
        console.log(`[Sort] ü¶Ä –ò—Å–ø–æ–ª—å–∑—É–µ–º WASM –¥–ª—è ${testData.length} –∑–∞–ø–∏—Å–µ–π`)
        setSortMethod('WASM')

        try {
          result = await execute('sortByKey', {
            data: testData,
            key: sortField === 'name' ? 'name' : 'age',
          })
        } catch (wasmError) {
          console.warn(`[Sort] WASM –æ—à–∏–±–∫–∞: ${String(wasmError)}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ JavaScript`)
          setSortMethod('JavaScript')

          // Fallback –Ω–∞ JavaScript –ø—Ä–∏ –æ—à–∏–±–∫–µ WASM
          result = [...testData].sort((a: any, b: any) => {
            const valueA = a?.[sortField]
            const valueB = b?.[sortField]

            if (typeof valueA === 'string' && typeof valueB === 'string') {
              return valueA.localeCompare(valueB)
            }

            if (typeof valueA === 'number' && typeof valueB === 'number') {
              return valueA - valueB
            }

            return String(valueA).localeCompare(String(valueB))
          })
        }
      } else {
        console.log(
          `[Sort] ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è ${testData.length} –∑–∞–ø–∏—Å–µ–π (WASM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`
        )
        setSortMethod('JavaScript')

        // JavaScript —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        result = [...testData].sort((a: any, b: any) => {
          const valueA = a?.[sortField]
          const valueB = b?.[sortField]

          if (typeof valueA === 'string' && typeof valueB === 'string') {
            return valueA.localeCompare(valueB)
          }

          if (typeof valueA === 'number' && typeof valueB === 'number') {
            return valueA - valueB
          }

          return String(valueA).localeCompare(String(valueB))
        })
      }

      if (Array.isArray(result)) {
        setSortedData(result)
        setSortTime(performance.now() - startTime)
      } else {
        throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', error)
      setError(`–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: ${String(error)}`)
      setSortMethod(null)
    } finally {
      setIsLoading(false)
    }
  }

  const handleDownload = () => {
    if (sortedData.length === 0) return
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-')
    downloadData(sortedData, `sorted_data_${sortField}_${timestamp}.json`, 'json')
  }

  const handleDownloadCsv = () => {
    if (sortedData.length === 0) return
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-')
    downloadData(sortedData, `sorted_data_${sortField}_${timestamp}.csv`, 'csv')
  }

  const goToPage = (page: number) => {
    setCurrentPage(Math.max(1, Math.min(page, totalPages)))
  }

  const changeRowsPerPage = (rows: number) => {
    setRowsPerPage(rows)
    setCurrentPage(1)
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
  const expectedMethod = hasWorker ? 'WASM' : 'JavaScript'
  const isLargeDataset = testData.length > 100_000

  return (
    <div className="demo-container">
      <div className="demo-content demo-content--centered">
        {!hasWorker && <div className="status-warning">‚ö†Ô∏è WASM –≤–æ—Ä–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...</div>}

        <div className="input-group">
          <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:</label>
          <div className="number-input-container">
            <input
              type="number"
              min="100"
              max="5000000"
              step="100"
              value={dataSize}
              onChange={e => setDataSize(parseInt(e.target.value) || 100)}
              className="number-input"
            />
            <span className="input-hint">–æ—Ç 100 –¥–æ 5,000,000 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 500,000)</span>
          </div>
        </div>

        <div className="input-group">
          <label>–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:</label>
          <div className="button-group">
            <Button
              variant={sortField === 'name' ? 'primary' : 'secondary'}
              size="sm"
              onClick={() => setSortField('name')}
            >
              –ü–æ –∏–º–µ–Ω–∏
            </Button>
            <Button
              variant={sortField === 'age' ? 'primary' : 'secondary'}
              size="sm"
              onClick={() => setSortField('age')}
            >
              –ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            </Button>
          </div>
        </div>

        <div className="button-group">
          <Button onClick={generateData} loading={isLoading} disabled={isLoading}>
            üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
          </Button>
          <Button onClick={sortData} loading={isLoading} disabled={testData.length === 0}>
            üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ({expectedMethod})
          </Button>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
        {generationProgress !== null && (
          <div className="progress-container">
            <div className="progress-info">
              <span>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...</span>
              <span>{generationProgress}%</span>
            </div>
            <div className="progress-bar">
              <div className="progress-fill" style={{ width: `${generationProgress}%` }} />
            </div>
          </div>
        )}

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—Ä–µ –º–∞—Å—Å–∏–≤–∞ */}
        {dataSize > MAX_SAFE_SIZE && (
          <div className="result warning">
            <h4>‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö</h4>
            <p>
              –í—ã —É–∫–∞–∑–∞–ª–∏ {dataSize.toLocaleString()} –∑–∞–ø–∏—Å–µ–π (–±–æ–ª—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –ª–∏–º–∏—Ç–∞{' '}
              {MAX_SAFE_SIZE.toLocaleString()}). –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –±—Ä–∞—É–∑–µ—Ä–∞,
              –≤—ã—Å–æ–∫–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –ø–∞–º—è—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–º –æ—à–∏–±–∫–∞–º.
            </p>
            <p>
              <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
              <br />‚Ä¢ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ {MAX_SAFE_SIZE.toLocaleString()} –∑–∞–ø–∏—Å–µ–π
              <br />‚Ä¢ –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
              <br />‚Ä¢ –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ &gt;1M –∑–∞–ø–∏—Å–µ–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            </p>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ */}
        {testData.length > 0 && (
          <div className={`result ${isLargeDataset ? 'success' : 'info'}`}>
            <h4>
              {isLargeDataset
                ? 'üöÄ –ë–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤ - –ø–æ—Ç–æ–∫–æ–≤–∞—è WASM —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞'
                : `üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è ${expectedMethod} —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞`}
            </h4>
            <p>
              {isLargeDataset ? (
                <>
                  –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –±–æ–ª—å—à–µ 100,000 –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Ç–æ–∫–æ–≤–∞—è
                  —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ WASM —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏.
                </>
              ) : (
                <>
                  –ú–∞—Å—Å–∏–≤ {testData.length.toLocaleString()} –∑–∞–ø–∏—Å–µ–π –±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑{' '}
                  {expectedMethod}.
                </>
              )}
            </p>
          </div>
        )}

        {/* –û—à–∏–±–∫–∏ */}
        {error && (
          <div className="result error">
            <h4>‚ùå –û—à–∏–±–∫–∞</h4>
            <p>{error}</p>
          </div>
        )}

        {sortedData.length > 0 && (
          <div className="results-section">
            <div className="results-header">
              <div className="sort-indicator">
                üìä –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ <strong>{sortField === 'name' ? '–∏–º–µ–Ω–∏' : '–≤–æ–∑—Ä–∞—Å—Ç—É'}</strong>:{' '}
                <strong>{sortedData.length.toLocaleString()}</strong> –∑–∞–ø–∏—Å–µ–π –≤—Å–µ–≥–æ
                {sortMethod && <span className="method-info"> ‚Ä¢ {sortMethod}</span>}
                {sortTime && (
                  <span>
                    {' '}
                    ‚Ä¢ –í—Ä–µ–º—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: <strong>{sortTime.toFixed(1)} –º—Å</strong>
                  </span>
                )}
              </div>
              <div className="download-buttons">
                <Button size="sm" onClick={handleDownload}>
                  üì• JSON ({sortedData.length.toLocaleString()})
                </Button>
                <Button size="sm" onClick={handleDownloadCsv}>
                  üì• CSV ({sortedData.length.toLocaleString()})
                </Button>
              </div>
            </div>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
            <div className="pagination-controls">
              <div className="rows-per-page">
                <label>–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π:</label>
                <select
                  value={rowsPerPage}
                  onChange={e => changeRowsPerPage(parseInt(e.target.value))}
                  className="pagination-select"
                >
                  <option value={10}>10</option>
                  <option value={20}>20</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                </select>
              </div>

              <div className="pagination-info">
                –ü–æ–∫–∞–∑–∞–Ω–æ {(currentPage - 1) * rowsPerPage + 1}-
                {Math.min(currentPage * rowsPerPage, sortedData.length)} –∏–∑{' '}
                {sortedData.length.toLocaleString()}
              </div>
            </div>

            <div className="table-container">
              <div className="table-header">
                <span>
                  üìã –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages})
                </span>
              </div>
              <table className="data-table">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th className={sortField === 'name' ? 'sorted-column' : ''}>–ò–º—è</th>
                    <th className={sortField === 'age' ? 'sorted-column' : ''}>–í–æ–∑—Ä–∞—Å—Ç</th>
                  </tr>
                </thead>
                <tbody>
                  {paginatedData.map((item, index) => (
                    <tr key={index}>
                      <td>{item.id}</td>
                      <td className={sortField === 'name' ? 'sorted-column' : ''}>{item.name}</td>
                      <td className={sortField === 'age' ? 'sorted-column' : ''}>{item.age}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            {totalPages > 1 && (
              <div className="pagination">
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() => goToPage(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  ‚Üê –ù–∞–∑–∞–¥
                </Button>

                <div className="pagination-pages">
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    const page = i + 1
                    return (
                      <Button
                        key={page}
                        size="sm"
                        variant={currentPage === page ? 'primary' : 'secondary'}
                        onClick={() => goToPage(page)}
                      >
                        {page}
                      </Button>
                    )
                  })}
                  {totalPages > 5 && (
                    <>
                      <span>...</span>
                      <Button
                        size="sm"
                        variant={currentPage === totalPages ? 'primary' : 'secondary'}
                        onClick={() => goToPage(totalPages)}
                      >
                        {totalPages}
                      </Button>
                    </>
                  )}
                </div>

                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() => goToPage(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  –í–ø–µ—Ä–µ–¥ ‚Üí
                </Button>
              </div>
            )}

            <div className="info">
              üí° <strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü, –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç—á—ë—Ç—ã.
              –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö {sortedData.length.toLocaleString()} –∑–∞–ø–∏—Å–µ–π,
              –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
              {isLargeDataset && (
                <span>
                  {' '}
                  –ü–æ—Ç–æ–∫–æ–≤–∞—è WASM —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤—ã –¥–æ 500k –∑–∞–ø–∏—Å–µ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º
                  –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏.
                </span>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
