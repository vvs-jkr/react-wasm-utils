import type { CsvSample } from '../model/types'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª—å—à–æ–π CSV —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export function generateLargeCsv(rows: number = 1000): string {
  const categories = ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–û–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–î–æ–º –∏ —Å–∞–¥', '–°–ø–æ—Ä—Ç']
  const brands = ['Apple', 'Samsung', 'Nike', 'Adidas', 'Sony', 'LG', 'HP', 'Dell']

  const lines = ['id,product,category,brand,price,stock,rating']

  for (let i = 1; i <= rows; i++) {
    const category = categories[Math.floor(Math.random() * categories.length)]
    const brand = brands[Math.floor(Math.random() * brands.length)]
    const price = (Math.random() * 50000 + 1000).toFixed(2)
    const stock = Math.floor(Math.random() * 100)
    const rating = (Math.random() * 2 + 3).toFixed(1) // 3.0 - 5.0

    lines.push(`${i},${brand} Product ${i},${category},${brand},${price},${stock},${rating}`)
  }

  return lines.join('\n')
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ CSV –¥–∞–Ω–Ω—ã—Ö - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 */
export const CSV_SAMPLES: CsvSample[] = [
  {
    key: 'simple',
    label: '–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö',
    icon: 'üìã',
    data: `name,age,city,salary
–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤,25,–ú–æ—Å–∫–≤–∞,75000
–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞,30,–°–ü–±,85000
–ü—ë—Ç—Ä –°–∏–¥–æ—Ä–æ–≤,35,–ö–∞–∑–∞–Ω—å,65000
–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞,28,–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫,70000
–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤,32,–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥,68000`,
  },
]

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä CSV –ø–æ –∫–ª—é—á—É
 */
export function getCsvSample(key: string): string {
  const sample = CSV_SAMPLES.find(s => s.key === key)
  return sample?.data || ''
}
